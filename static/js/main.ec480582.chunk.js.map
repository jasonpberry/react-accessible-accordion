{"version":3,"sources":["Accordion.js","App.js","serviceWorker.js","index.js"],"names":["AccordianOutput","_this","this","react_default","a","createElement","className","umd","props","sections","map","section","index","key","expanded","isExpanded","name","onClick","e","handleButton","Component","App","state","bind","Object","assertThisInitialized","itemIndex","console","log","nextSectionId","setState","prevState","toConsumableArray","forEach","label","Math","floor","random","prevProps","Accordion_AccordianOutput","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4RAUqBA,0LACV,IAAAC,EAAAC,KACP,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAACE,EAAA,UAAD,KACGL,KAAKM,MAAMC,SAASC,IAAI,SAACC,EAASC,GAAV,OACvBT,EAAAC,EAAAC,cAACE,EAAA,cAAD,CAAeM,IAAKD,EAAOE,SAAUH,EAAQI,YAC3CZ,EAAAC,EAAAC,cAACE,EAAA,mBAAD,KACEJ,EAAAC,EAAAC,cAAA,UAAKM,EAAQK,OAEfb,EAAAC,EAAAC,cAACE,EAAA,kBAAD,KACEJ,EAAAC,EAAAC,cAAA,wBAAgBM,EAAQK,MAExBb,EAAAC,EAAAC,cAAA,UACEY,QAAS,SAAAC,GACPjB,EAAKO,MAAMW,aAAaP,IAE1BN,UAAU,mBAJZ,kCAb6Bc,cCNxBC,6MACnBC,MAAQ,CACNb,SAAU,CACR,CAAEO,KAAM,YAAaD,YAAY,GACjC,CAAEC,KAAM,YAAaD,YAAY,GACjC,CAAEC,KAAM,YAAaD,YAAY,GACjC,CAAEC,KAAM,YAAaD,YAAY,OAIrCI,aAAelB,EAAKkB,aAAaI,KAAlBC,OAAAC,EAAA,EAAAD,QAAAC,EAAA,EAAAD,CAAAvB,iFAEFyB,GACXC,QAAQC,IAAI,WAAY1B,MAExB,IAAM2B,EAAgBH,EAAY,EAClCC,QAAQC,IAAI,uBAAwBF,GACpCC,QAAQC,IAAI,yBAA0BC,GAEtC3B,KAAK4B,SAAS,SAAAC,GACZ,IAAMtB,EAAQe,OAAAQ,EAAA,EAAAR,CAAOO,EAAUtB,UAa/B,OAZAA,EAASwB,QAAQ,SAACtB,EAASC,GACrBA,IAAUiB,GACZlB,EAAQI,YAAa,EAErBJ,EAAQuB,MAAQzB,EAASG,GAAOI,KAAOL,EAAQK,KAC7CP,EAASG,GAAOI,KAChB,eACAmB,KAAKC,MAAsB,IAAhBD,KAAKE,WAElB1B,EAAQI,YAAa,IAGlB,CACLN,SAAUA,iDAMdkB,QAAQC,IAAI,WACZD,QAAQC,IAAI1B,KAAKoB,kDAGAgB,EAAWP,GAC5BJ,QAAQC,IAAI,qBACZD,QAAQC,IAAI,qBAAsBG,GAClCJ,QAAQC,IAAI,gBAAiB1B,KAAKoB,MAAMb,2CAIxC,OACEN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACkC,EAAD,CACE9B,SAAUP,KAAKoB,MAAMb,SACrBU,aAAcjB,KAAKiB,uBAvDIC,aCQboB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3C,EAAAC,EAAAC,cAAC0C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.ec480582.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport {\n  Accordion,\n  AccordionItem,\n  AccordionItemTitle,\n  AccordionItemBody\n} from \"react-accessible-accordion\";\n\nimport \"react-accessible-accordion/dist/fancy-example.css\";\n\nexport default class AccordianOutput extends Component {\n  render() {\n    return (\n      <div className='Accordion'>\n        <Accordion>\n          {this.props.sections.map((section, index) => (\n            <AccordionItem key={index} expanded={section.isExpanded}>\n              <AccordionItemTitle>\n                <h3>{section.name}</h3>\n              </AccordionItemTitle>\n              <AccordionItemBody>\n                <p>Content for {section.name}</p>\n\n                <button\n                  onClick={e => {\n                    this.props.handleButton(index);\n                  }}\n                  className='btn btn-primary'>\n                  Save and Continue\n                </button>\n              </AccordionItemBody>\n            </AccordionItem>\n          ))}\n        </Accordion>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Accordion from \"./Accordion\";\n\nexport default class App extends Component {\n  state = {\n    sections: [\n      { name: \"Section 1\", isExpanded: true },\n      { name: \"Section 2\", isExpanded: false },\n      { name: \"Section 3\", isExpanded: false },\n      { name: \"Section 4\", isExpanded: false }\n    ]\n  };\n\n  handleButton = this.handleButton.bind(this);\n\n  handleButton(itemIndex) {\n    console.log(\"THIS IS \", this);\n\n    const nextSectionId = itemIndex + 1;\n    console.log(\"Clicked on index -> \", itemIndex);\n    console.log(\"Next Section Index -> \", nextSectionId);\n\n    this.setState(prevState => {\n      const sections = [...prevState.sections];\n      sections.forEach((section, index) => {\n        if (index === nextSectionId) {\n          section.isExpanded = true;\n          // Update the label to see the one that should open change it's state.\n          section.label = sections[index].name = section.name =\n            sections[index].name +\n            \" -> Update: \" +\n            Math.floor(Math.random() * 100);\n        } else {\n          section.isExpanded = false;\n        }\n      });\n      return {\n        sections: sections\n      };\n    });\n  }\n\n  componentDidMount() {\n    console.log(\"Mounted\");\n    console.log(this.state);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    console.log(\"Component Updated\");\n    console.log(\"Previous State -> \", prevState);\n    console.log(\"Current State\", this.state.sections);\n  }\n\n  render() {\n    return (\n      <div className='App'>\n        <Accordion\n          sections={this.state.sections}\n          handleButton={this.handleButton}\n        />\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}